From 58513ee87720c2f25f35e60372373feb484307c8 Mon Sep 17 00:00:00 2001
From: Jon Uhlmann <account@uhlmann.pro>
Date: Wed, 19 Jun 2024 11:45:38 +0200
Subject: [PATCH] Update IndexingHelper.php

---
 Classes/Eel/IndexingHelper.php | 55 ++++++++++++++++++++++++++++++----
 1 file changed, 50 insertions(+), 5 deletions(-)

diff --git a/Classes/Eel/IndexingHelper.php b/Classes/Eel/IndexingHelper.php
index b870295..a0ed72c 100644
--- a/Classes/Eel/IndexingHelper.php
+++ b/Classes/Eel/IndexingHelper.php
@@ -21,12 +21,26 @@
 use Neos\ContentRepository\Domain\Model\NodeType;
 use Neos\ContentRepository\Search\Exception\IndexingException;
 use Psr\Log\LoggerInterface;
+use Litefyr\Presentation\EelHelper\PresentationHelper;
 
 /**
  * IndexingHelper
  */
 class IndexingHelper implements ProtectedContextAwareInterface
 {
+    /**
+     * @Flow\InjectConfiguration(package="Litefyr.Meilisearch", path="fulltextPlain")
+     * @var string
+     */
+    protected $fulltextPlain;
+
+    /**
+     * @Flow\Inject
+     * @var PresentationHelper
+     */
+    protected $presentationHelper;
+
+
     /**
      * @Flow\Inject
      * @var AssetExtractorInterface
@@ -150,6 +164,14 @@ public function convertArrayOfNodesToArrayOfNodeProperty($nodes, string $propert
         return $nodeProperties;
     }
 
+    private function litefyrCleanup($string) {
+        // Remove ⚑, as it get replaced with the logo
+        $string = str_replace('⚑', '', (string) $string);
+
+        // Remove typewriter
+        return $this->presentationHelper->removeTypewriter($string);
+    }
+
     /**
      *
      * @param $string
@@ -163,12 +185,22 @@ public function extractHtmlTags($string): array
 
         // prevents concatenated words when stripping tags afterwards
         $string = str_replace(['<', '>'], [' <', '> '], $string);
-        // strip all tags except h1-6
-        $string = strip_tags($string, '<h1><h2><h3><h4><h5><h6>');
+
+        $string = $this->litefyrCleanup($string);
 
         $parts = [
-            'text' => ''
+            'text' => '',
         ];
+
+        if ($this->fulltextPlain) {
+            $plainText = strip_tags($string);
+            $plainText = preg_replace('/\s+/u', ' ', $plainText);
+            $parts['text'] = $plainText;
+        }
+
+        // strip all tags except h1-6
+        $string = strip_tags($string, '<h1><h2><h3><h4><h5><h6>');
+
         while ($string !== '') {
             $matches = [];
             if (preg_match('/<(h1|h2|h3|h4|h5|h6)[^>]*>.*?<\/\1>/ui', $string, $matches, PREG_OFFSET_CAPTURE)) {
@@ -177,7 +209,9 @@ public function extractHtmlTags($string): array
                 $tagName = $matches[1][0];
 
                 if ($startOfMatch > 0) {
-                    $parts['text'] .= substr($string, 0, $startOfMatch);
+                    if (!$this->fulltextPlain) {
+                        $parts['text'] .= substr($string, 0, $startOfMatch);
+                    }
                     $string = substr($string, $startOfMatch);
                 }
                 if (!isset($parts[$tagName])) {
@@ -188,7 +222,9 @@ public function extractHtmlTags($string): array
                 $string = substr($string, strlen($fullMatch));
             } else {
                 // no h* found anymore in the remaining string
-                $parts['text'] .= $string;
+                if (!$this->fulltextPlain) {
+                    $parts['text'] .= $string;
+                }
                 break;
             }
         }
@@ -207,6 +243,15 @@ public function extractHtmlTags($string): array
      */
     public function extractInto(string $bucketName, $string): array
     {
+        $string = $this->litefyrCleanup($string);
+
+        if ($this->fulltextPlain) {
+            return [
+                'text' => (string)$string,
+                $bucketName => (string)$string
+            ];
+        }
+
         return [
             $bucketName => (string)$string
         ];
